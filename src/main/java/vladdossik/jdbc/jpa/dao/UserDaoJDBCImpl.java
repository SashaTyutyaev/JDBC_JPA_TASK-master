package vladdossik.jdbc.jpa.dao;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import vladdossik.jdbc.jpa.model.User;
import vladdossik.jdbc.jpa.util.Util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

@NoArgsConstructor
@Slf4j
public class UserDaoJDBCImpl implements UserDao {

    private static final Connection CONNECTION = Util.getConnectionJDBC();
    private static final String SELECT_ALL_USERS = "select * from users";
    private static final String CREATE_USER = "insert into users (name, last_name, age) VALUES (?, ?, ?)";
    private static final String DELETE_USER = "delete from users WHERE id = ?";
    private static final String CREATE_TABLE_USERS = "create table if not exists users ("
            + "id bigint primary key generated by default as identity not null, "
            + "name varchar(255) not null, "
            + "last_name varchar(255) not null, "
            + "age integer not null)";
    private static final String CLEAN_USERS = "delete from users";
    private static final String DROP_TABLE_USERS = "drop table if exists users";

    public void createUsersTable() {
        try (Statement statement = CONNECTION.createStatement()) {
            statement.execute(CREATE_TABLE_USERS);
            log.info("Successfully created table users");
        } catch (SQLException e) {
            log.error("Failed to create table users");
            throw new RuntimeException(e);
        }
    }

    public void dropUsersTable() {
        try (Statement statement = CONNECTION.createStatement()) {
            statement.execute(DROP_TABLE_USERS);
            log.info("Successfully dropped table users");
        } catch (SQLException e) {
            log.error("Failed to drop table users");
            throw new RuntimeException(e);
        }
    }

    public void saveUser(String name, String lastName, byte age) {
        try (PreparedStatement preparedStatement = CONNECTION.prepareStatement(CREATE_USER)) {
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
            preparedStatement.execute();
            log.info("Successfully saved user with name {} and last name {}", name, lastName);
        } catch (SQLException e) {
            log.error("Failed to save user");
            throw new RuntimeException(e);
        }

    }

    public void removeUserById(long id) {
        try (PreparedStatement preparedStatement = CONNECTION.prepareStatement(DELETE_USER)) {
            preparedStatement.setLong(1, id);
            preparedStatement.execute();
            log.info("Successfully deleted user with id {}", id);
        } catch (SQLException e) {
            log.error("Failed to remove user by id");
            throw new RuntimeException(e);
        }
    }

    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        try (PreparedStatement preparedStatement = CONNECTION.prepareStatement(SELECT_ALL_USERS)) {

            ResultSet rs = preparedStatement.executeQuery();

            while (rs.next()) {
                users.add(User.builder()
                        .id(rs.getLong("id"))
                        .name(rs.getString("name"))
                        .lastName(rs.getString("last_name"))
                        .age(rs.getByte("age"))
                        .build());
            }

            log.info("Successfully loaded {} users", users.size());
            return users;

        } catch (SQLException e) {
            log.error("Failed to get all users");
            throw new RuntimeException(e);
        }
    }

    public void cleanUsersTable() {
        try (Statement statement = CONNECTION.createStatement()) {

            statement.execute(CLEAN_USERS);
            log.info("Successfully cleaned table users");

        } catch (SQLException e) {
            log.error("Failed to clean table users");
            throw new RuntimeException(e);
        }
    }

}
