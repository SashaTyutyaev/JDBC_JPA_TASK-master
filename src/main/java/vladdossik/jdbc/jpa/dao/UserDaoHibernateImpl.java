package vladdossik.jdbc.jpa.dao;

import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import vladdossik.jdbc.jpa.model.User;
import vladdossik.jdbc.jpa.util.Util;

import java.util.List;

@Slf4j
@NoArgsConstructor
public class UserDaoHibernateImpl implements UserDao {

    private static final SessionFactory SESSION_FACTORY = Util.getSessionFactory();
    private static final String CREATE_TABLE_USERS = "create table if not exists users ("
            + "id bigint primary key generated by default as identity not null, "
            + "name varchar(255) not null, "
            + "last_name varchar(255) not null, "
            + "age integer not null)";
    private static final String DROP_TABLE_USERS = "drop table if exists users";

    @Override
    public void createUsersTable() {
        Session session = SESSION_FACTORY.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();
            session.createSQLQuery(CREATE_TABLE_USERS).executeUpdate();
            transaction.commit();
            log.info("Successfully created users table");
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            log.error("Failed to create users table");
            throw new RuntimeException(e);
        } finally {
            session.close();
        }
    }

    @Override
    public void dropUsersTable() {
        Session session = SESSION_FACTORY.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();
            session.createSQLQuery(DROP_TABLE_USERS).executeUpdate();
            transaction.commit();
            log.info("Successfully dropped users table");
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            log.error("Failed to drop users table");
            throw new RuntimeException(e);
        } finally {
            session.close();
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        Session session = SESSION_FACTORY.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();
            User user = User.builder()
                    .name(name)
                    .lastName(lastName)
                    .age(age)
                    .build();
            session.save(user);
            transaction.commit();
            log.info("Successfully saved user with name {} and last name {}", name, lastName);
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            log.error("Failed to save user");
            throw new RuntimeException(e);
        } finally {
            session.close();
        }
    }

    @Override
    public void removeUserById(long id) {
        Session session = SESSION_FACTORY.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();
            User user = (User) session.get(User.class, id);

            if (user != null) {
                session.delete(user);
                log.info("Successfully deleted user with id {}", id);
            } else {
                log.info("User with id {} not found", id);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            log.error("Failed to delete user with id {}", id);
            throw new RuntimeException(e);
        } finally {
            session.close();
        }
    }

    @Override
    public List<User> getAllUsers() {
        Session session = SESSION_FACTORY.openSession();
        Transaction transaction = null;
        List<User> users;

        try {
            transaction = session.beginTransaction();
            users = session.createCriteria(User.class).list();
            transaction.commit();
            log.info("Successfully loaded {} users", users.size());
            return users;
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            log.error("Failed to load users");
            throw new RuntimeException(e);
        } finally {
            session.close();
        }
    }

    @Override
    public void cleanUsersTable() {
        Session session = SESSION_FACTORY.openSession();
        Transaction transaction = null;

        try {
            transaction = session.beginTransaction();
            session.createQuery("delete from User").executeUpdate();
            transaction.commit();
            log.info("Successfully cleaned users table");
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            log.error("Failed to clean users table");
            throw new RuntimeException(e);
        } finally {
            session.close();
        }
    }
}
